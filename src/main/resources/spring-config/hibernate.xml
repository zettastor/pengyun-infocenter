<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:context="http://www.springframework.org/schema/context"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://www.springframework.org/schema/beans"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd


       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
  <!-- 引入properties文件 -->
  <bean class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close"
    id="dataSource">
    <!-- 设置JDBC驱动名称 -->
    <property name="driverClass" value="${jdbc.driver.class}"/>
    <!-- 设置JDBC连接URL -->
    <property name="jdbcUrl" value="${jdbc.url}"/>
    <!-- 设置数据库用户名 -->
    <property name="user" value="${jdbc.user}"/>
    <!-- 设置数据库密码 -->
    <property name="password" value="${jdbc.password}"/>
    <!-- 设置连接池初始值 -->
    <property name="initialPoolSize" value="${jdbc.initial.pool.size}"/>
    <!-- NOTE! When adjusting poolsize, also adjust them in the 'hibernateProperties' -->
    <property name="minPoolSize" value="${jdbc.min.pool.size}"/>
    <property name="maxPoolSize" value="${jdbc.max.pool.size}"/>

    <property name="acquireIncrement" value="5"/>
    <property name="acquireRetryAttempts" value="1200"/>
    <property name="acquireRetryDelay" value="1000"/>
    <property name="checkoutTimeout" value="300000"/>
    <property name="idleConnectionTestPeriod" value="180"/>
    <property name="maxIdleTime" value="0"/>
    <property name="maxIdleTimeExcessConnections" value="0"/>
    <property name="maxStatements" value="0"/>
    <property name="maxStatementsPerConnection" value="25"/>
    <property name="numHelperThreads" value="6"/>
    <property name="preferredTestQuery" value="SELECT 1"/>
    <property name="testConnectionOnCheckin" value="true"/>
    <property name="testConnectionOnCheckout" value="false"/>
  </bean>
  <!-- 定义数据库连接池数据源bean destroy-method="close"的作用是当数据库连接不使用的时候,就把该连接重新放到数据池中,方便下次使用调用 -->
  <bean class="org.springframework.orm.hibernate5.LocalSessionFactoryBean"
    id="sessionFactory">
    <!-- 数据源 -->
    <property name="dataSource" ref="dataSource"/>

    <!-- hibernate的相关属性配置 -->
    <property name="hibernateProperties">

      <props>
        <!-- 设置数据库方言 -->
        <prop key="hibernate.dialect">${hibernate.dialect}</prop>
        <!-- 设置自动创建|更新|验证数据库表结构 -->
        <prop key="hibernate.hbm2ddl.auto">update</prop>
        <!-- 是否在控制台显示sql -->
        <prop key="hibernate.show_sql">false</prop>
        <!-- 是否格式化sql，优化显示 -->
        <prop key="hibernate.format_sql">false</prop>
        <!-- 是否开启二级缓存 -->
        <prop key="hibernate.cache.use_second_level_cache">false</prop>
        <!-- 是否开启查询缓存 -->
        <prop key="hibernate.cache.use_query_cache">false</prop>
        <!-- 数据库批量查询最大数 -->
        <prop key="hibernate.jdbc.fetch_size">50</prop>
        <!-- 数据库批量更新、添加、删除操作最大数 -->
        <prop key="hibernate.jdbc.batch_size">50</prop>
        <!-- 是否自动提交事务 -->
        <prop key="hibernate.connection.autocommit">true</prop>
        <!-- 指定hibernate在何时释放JDBC连接 -->
        <prop key="hibernate.connection.release_mode">auto</prop>
        <!-- hibernate.jdbc.use_streams_for_binary=true -->
        <!-- 创建session方式 hibernate5.x 的方式 -->
        <prop key="hibernate.current_session_context_class">
          org.springframework.orm.hibernate5.SpringSessionContext
        </prop>
        <!-- javax.persistence.validation.mode默认情况下是auto的，就是说如果不设置的话它是会自动去你的classpath下面找一个bean-validation**包
          所以把它设置为none即可 -->
        <prop key="javax.persistence.validation.mode">none</prop>
      </props>

      <!-- back 2019.04.12  psql -->
      <!--<value>-->
      <!--&lt;!&ndash; 设置数据库方言 &ndash;&gt;-->
      <!--hibernate.dialect=py.db.sqlite.dialect.PostgresCustomDialect-->
      <!--&lt;!&ndash; 设置自动创建|更新|验证数据库表结构 &ndash;&gt;-->
      <!--hibernate.hbm2ddl.auto=update-->
      <!--&lt;!&ndash; 是否在控制台显示sql &ndash;&gt;-->
      <!--hibernate.show_sql=false-->
      <!--&lt;!&ndash; 是否格式化sql，优化显示 &ndash;&gt;-->
      <!--hibernate.format_sql=false-->
      <!--&lt;!&ndash; 是否开启二级缓存 &ndash;&gt;-->
      <!--hibernate.cache.use_second_level_cache=false-->
      <!--&lt;!&ndash; 是否开启查询缓存 &ndash;&gt;-->
      <!--hibernate.cache.use_query_cache=false-->
      <!--&lt;!&ndash; 数据库批量查询最大数 &ndash;&gt;-->
      <!--hibernate.jdbc.fetch_size=50-->
      <!--&lt;!&ndash; 数据库批量更新、添加、删除操作最大数 &ndash;&gt;-->
      <!--hibernate.jdbc.batch_size=50-->
      <!--&lt;!&ndash; 是否自动提交事务 &ndash;&gt;-->
      <!--hibernate.connection.autocommit=true-->
      <!--&lt;!&ndash; 指定hibernate在何时释放JDBC连接 &ndash;&gt;-->
      <!--hibernate.connection.release_mode=auto-->
      <!--&lt;!&ndash; hibernate.jdbc.use_streams_for_binary=true &ndash;&gt;-->
      <!--&lt;!&ndash; 创建session方式 hibernate5.x 的方式 &ndash;&gt;-->
      <!--hibernate.current_session_context_class=org.springframework.orm.hibernate5.SpringSessionContext-->
      <!--&lt;!&ndash; javax.persistence.validation.mode默认情况下是auto的，就是说如果不设置的话它是会自动去你的classpath下面找一个bean-validation**包-->
      <!--所以把它设置为none即可 &ndash;&gt;-->
      <!--javax.persistence.validation.mode=none-->
      <!--</value>-->
    </property>
    <!-- 自动扫描实体对象 tdxy.bean的包结构中存放实体类 -->
    <!--    <property name="packagesToScan" value="tdxy.bean" /> -->
    <property name="mappingResources">
      <list>
        <value>${package.hbm}/volumes.hbm.xml</value>
        <value>${package.hbm}/storages.hbm.xml</value>
        <value>hibernate-config/access.rules.hbm.xml</value>
        <value>hibernate-config/archives.hbm.xml</value>
        <value>hibernate-config/drivers.hbm.xml</value>
        <value>hibernate-config/relationship.hbm.xml</value>
        <value>hibernate-config/domain.hbm.xml</value>
        <value>hibernate-config/storage.pool.hbm.xml</value>
        <value>hibernate-config/capacity.record.hbm.xml</value>
        <value>hibernate-config/accounts.hbm.xml</value>
        <value>hibernate-config/apis.hbm.xml</value>
        <value>hibernate-config/roles.hbm.xml</value>
        <value>hibernate-config/resources.hbm.xml</value>
        <value>hibernate-config/serverinfo.hbm.xml</value>
        <value>hibernate-config/diskinfo.hbm.xml</value>
        <value>hibernate-config/iscsi.access.rules.hbm.xml</value>
        <value>hibernate-config/iscsi.relationship.hbm.xml</value>
        <value>hibernate-config/io.limitation.rules.hbm.xml</value>
        <value>hibernate-config/migration.rule.hbm.xml</value>
        <value>hibernate-config/maintenances.hbm.xml</value>
        <value>hibernate-config/rebalance.rule.hbm.xml</value>
        <value>hibernate-config/recoverDbSentry.hbm.xml</value>

        <value>hibernate-config/create-volume-requests.hbm.xml</value>
        <value>hibernate-config/delete-volume-requests.hbm.xml</value>
        <value>hibernate-config/operation.hbm.xml</value>
        <value>hibernate-config/instance_volumes_information.hbm.xml</value>

        <value>hibernate-config/scsi_client.hbm.xml</value>
        <value>hibernate-config/task_request.hbm.xml</value>
        <value>hibernate-config/scsi.drivers.hbm.xml</value>

        <value>hibernate-config/volumes.delete.delay.hbm.xml</value>
        <value>hibernate-config/volumes.recycle.hbm.xml</value>

        <value>hibernate-config/drivers.client.info.hbm.xml</value>
      </list>
    </property>
  </bean>

  <!-- 配置sessionFactory -->
  <bean class="org.springframework.orm.hibernate5.HibernateTransactionManager"
    id="transactionManager">
    <property name="sessionFactory" ref="sessionFactory"/>
  </bean>
  <!-- 定义事务管理 -->
  <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>

  <!-- 定义 Autowired  自动注入 bean -->
  <context:property-placeholder location="classpath:config/infocenter.properties"/>

  <!-- 扫描有注解的文件  base-package 包路径 -->
  <!--   <context:component-scan base-package="tdxy"/> -->

  <!-- <tx:advice id="txAdvice" transaction-manager="transactionManager">
      <tx:attributes>
          事务执行方式
              REQUIRED：指定当前方法必需在事务环境中运行，
              如果当前有事务环境就加入当前正在执行的事务环境，
              如果当前没有事务，就新建一个事务。
              这是默认值。

          <tx:method name="create*" propagation="REQUIRED" />
          <tx:method name="save*" propagation="REQUIRED" />
          <tx:method name="add*" propagation="REQUIRED" />
          <tx:method name="update*" propagation="REQUIRED" />
          <tx:method name="remove*" propagation="REQUIRED" />
          <tx:method name="del*" propagation="REQUIRED" />
          <tx:method name="import*" propagation="REQUIRED" />

              指定当前方法以非事务方式执行操作，如果当前存在事务，就把当前事务挂起，等我以非事务的状态运行完，再继续原来的事务。
              查询定义即可
              read-only="true"  表示只读

          <tx:method name="*" propagation="NOT_SUPPORTED" read-only="true" />
      </tx:attributes>
  </tx:advice>

  定义切面，在 * tdxy.*.service.*ServiceImpl.*(..) 中执行有关的hibernate session的事务操作
  <aop:config>
      <aop:pointcut id="serviceOperation" expression="execution(* tdxy.*.service.*Service.*(..))" />
      <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" />
  </aop:config> -->

  <tx:annotation-driven transaction-manager="transactionManager"/>


  <!-- 声明式容器事务管理 ,transaction-manager指定事务管理器为transactionManager -->
  <!-- <tx:advice id="txAdvice" transaction-manager="transactionManager">
  <tx:attributes>
  <tx:method name="add*" propagation="REQUIRED" />
  <tx:method name="get*" propagation="REQUIRED" />
  <tx:method name="*" read-only="true" />
  </tx:attributes>
  </tx:advice> -->
  <!-- <aop:config expose-proxy="true">
  只对业务逻辑层实施事务
  <aop:pointcut id="txPointcut" expression="execution(* com.test.service..*.*(..))" />
  Advisor定义，切入点和通知分别为txPointcut、txAdvice
  <aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
  </aop:config> -->

</beans>
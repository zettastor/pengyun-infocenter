app.name=InfoCenter
app.location=r=PY;d=PY;c=PY;h=PY
app.main.endpoint=8020
dih.endpoint=10000
thrift.client.timeout=20000
health.checker.rate=1000
#the instance timeout, if the data node not report the instance more the threshold, the instance will be removed.
#the instance means storage.
instance.metadata.to.remove=30000
driver.report.timeout.ms=10000
driver.sweeper.rate=1000
#volume sweeper is responsible for dealing with the volume status, it run with period 1000ms;
volume.sweeper.rate=5000
#timeout sweeper is responsible for checking segment unit is timeout for data node not report their status for long time
#it run with period 1000ms 
timeout.sweeper.rate=5000
#instance meta data sweeper is responsible for checking the storage is timeout, if timeout it will delete the storage;
#it run with period 5000ms
instance.metadata.sweeper.rate=5000
#alarm sweeper is responsible for pulling alarm data from remote machine
alarm.sweeper.rate=5000
#background delete link clone src volume
background.delete.link.clone.src.volume.rate.ms=5000
###data node report segment unit timeout, if timeout, the segment units are considered unknown and will be deleted from segment###
segment.unit.report.timeout.second=90
###when volume are in tobecreated in more than 90s, the volume will become deleting status###
volume.tobecreated.timeout.second=90
###when volume are in becreating in more than 1800s, the volume will become deleting status###
volume.becreating.timeout.second=1800
# datanode group count, it means how many keys we should generate in group map
group.count=3
### ***zookeeper properties*** ###
zookeeper.connection.string=localhost:2181
zookeeper.session.timeout.ms=100000
zookeeper.lock.directory=/lock/infocenter
zookeeper.election.switch=true
###volume will be totally removed if volume in dead status is greater than the seconds###
dead.volume.to.remove.second=15552000
### fix volume time out second
fix.volume.timeout.second=600
### ***hibernate properties*** ###
jdbc.driver.class=org.postgresql.Driver
jdbc.url=jdbc:postgresql://10.0.1.119:5432/controlandinfodb
jdbc.user=py
jdbc.password=312
jdbc.initial.pool.size=5
jdbc.min.pool.size=5
jdbc.max.pool.size=30
hibernate.dialect=py.db.sqlite.dialect.PostgresCustomDialect
package.hbm=hibernate-config
#hibernate.dialect= py.db.sqlite.dialect.H2DialectCustom
### ***log4j properties*** ###
log.level=DEBUG
log.output.file=logs/infocenter.log
### ***infocenter free space refresh period time properties*** ###
actual.free.space.refresh.period.time=29000
### ***make sure the volume to be orphan interval time600000*** ###
volume.tobeorphan.time=100
### time interval action can be response to datanode or archive
next.action.time.interval.ms=5000
### ***store record capacity for N count*** ###
store.capacity.record.count=7
### ** add for test, default should be 24*60*60=86400 ***###
take.sample.for.capacity.interval.second=86400
zookeeper.launcher=/opt/zookeeper/zookeeper-3.4.6/bin/zkServer.sh start /opt/zookeeper/zookeeper.cfg
### config for save database ####
### round time interval should be n(n>1) times of archive.report.rate.ms(datanode config) ###
round.time.interval.ms=30000
max.backup.database.count=3
### ***about rebalance*** ###
### the max rebalance task count in volume per datanode
max.rebalance.task.count.volume.datanode=15
### the max volume count in pool for rebalance
max.rebalance.volume.count.pool=1
### maximum deviation for each node distribution percent of P or PS
rebalance.pressure.threshold=0.1
### the accuracy of the threshold.
#   e.g.
#       if threshold=0.001 and accuracy=3, then if diff of calculated = 0.0019, we make it 0.001, it also cannot do rebalance.
#       but if accuracy=4, we make the diff = 0.0019, and threshold = 0.0010, it can do rebalance
rebalance.pressure.threshold.accuracy=3
### each rebalance task expire time(unit: S)
rebalance.task.expire.time.seconds=1800
### rebalance trigger period(unit: S)
rebalance.trigger.period.seconds=60
### rebalance can trigger when total segment count in volume bigger than this
rebalance.trigger.volume.segment.count.min=20
get.rebalance.task.delay.rate.ms=5000
get.rebalance.task.expired.time.ms=30000
servernode.report.overtime.second=20
servernode.alert.checker.rate=10000
create.segmentunit.passel.count=100
segment.size=16777216
###update log operation passtime properties
#1day
rollback.passtime.second=86400
#10min
operation.passtime.second=600
#####
# Following options are for hibernate
#####
#jdbc.driver.class=org.h2.Driver
#jdbc.url=jdbc:h2:mem:db
#dialect=org.hibernate.dialect.H2Dialect
#jdbc.user=root
#jdbc.password=312
#jdbc.initial.pool.size=5
#jdbc.min.pool.size=5
#jdbc.max.pool.size=20
### segment unit creater thread pool size ###
create.segment.unit.threadpool.core.size=2
### segment unit creater thread pool size ###
create.segment.unit.threadpool.max.size=50
segment.creator.enabled=false
segment.creator.blocking.timeout.ms=10000
# we will use our static configuration function to modify these properties
# license storage type.
#
# file: file storage
#    *this type of storage is use for launching a "sudo bin/LauncherTestStation"
#    *or, we can use this type of storage in condition of that there is no ZooKeeper in our system
#
# zookeeper: ZooKeeper storage
#
# database: now we use db store for zookeeper will delete node when restart
#
license.storage.type=database
segment.num.to.create.each.time.for.simple.configured.volume=5
save.operation.days=30
### about db request task ###
DB.task.core.pool.size=5
DB.task.max.pool.size=20
DB.task.max.concurrent.size=20
DB.task.worker.rate.ms=5000
driver.client.info.keep.time.second=2592000
driver.client.info.keep.number=80

